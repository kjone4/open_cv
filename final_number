#include <iostream>
#include "opencv2/opencv.hpp"
using namespace cv;
using namespace std;

void on_mouse(int event, int x, int y, int flags, void*);
int ContourCount(Mat img);   //외곽선 개수
Mat bound_Box(Mat img); //숫자 범위
Point CP(Mat img); // 무게 중심
vector<double> divide_x(Mat img); //분석 x
vector<double> divide_y(Mat img); //분석 y
double avg(vector<double> v); // x,y 분석 값 평균
double aspect_ratio(Mat img); //가로세로 비율
Mat cut_c(Mat img, Mat cen, int direction, int type);//무게중심 자르기
int run_real(Mat img); // 동작
Point ptOld;
Mat img;
Mat gray, bin;
int main() {
   img = Mat(Size(900, 500), CV_8UC3, Scalar(255, 255, 255));

   line(img, Point(500, 0), Point(500, img.cols), Scalar(0, 0, 0), 3);
   line(img, Point(0, 0), Point(img.cols, 0), Scalar(0, 0, 0), 3);
   line(img, Point(0, 0), Point(0, img.rows), Scalar(0, 0, 0), 3);
   line(img, Point(0, img.rows), Point(img.cols, img.rows), Scalar(0, 0, 0), 3);
   line(img, Point(img.cols, 0), Point(img.cols, img.rows), Scalar(0, 0, 0), 3);
   line(img, Point(700, 0), Point(700, img.rows), Scalar(0, 0, 0), 3);
   for (int i = 0; i < img.cols; i += 100) {
      line(img, Point(img.rows, i), Point(img.cols, i), Scalar(0, 0, 0), 3);
   }

   putText(img, "Save", Point(520, 65), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "Load", Point(520, 165), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "Clear", Point(520, 265), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "Run", Point(520, 365), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "Exit", Point(520, 465), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "Box", Point(720, 65), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "CT", Point(720, 165), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "CP", Point(720, 265), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "xy", Point(720, 365), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   putText(img, "rat", Point(720, 465), FONT_HERSHEY_SIMPLEX, 2, Scalar(0, 0, 0), 3);
   namedWindow("img");
   setMouseCallback("img", on_mouse);

   imshow("img", img);
   waitKey();
   return 0;
}
void on_mouse(int event, int x, int y, int flags, void*) {
   Mat dst;
   Rect number(Point(0, 0), Point(500, 500));
   Rect save(Point(500, 0), Point(700, 100));
   Rect load(Point(500, 100), Point(700, 200));
   Rect clear(Point(500, 200), Point(700, 300));
   Rect run(Point(500, 300), Point(700, 400));
   Rect Exit(Point(500, 400), Point(700, 500));
   Rect f1(Point(700, 0), Point(900, 100));
   Rect f2(Point(700, 100), Point(900, 200));
   Rect f3(Point(700, 200), Point(900, 300));
   Rect f4(Point(700, 300), Point(900, 400));
   Rect f5(Point(700, 400), Point(900, 599));
   switch (event) {
   case EVENT_LBUTTONDOWN:
      if (number.contains(Point(x, y))) {
         ptOld = Point(x, y);
      }
      else if (clear.contains(Point(x, y))) {//지우기 (완성)
         cout << "clear" << endl;
         img(Rect(Point(3, 3), Point(498, 498))).setTo(255);
      }
      else if (save.contains(Point(x, y))) {//저장 (완성)
         cout << "save" << endl;
         String s;
         cout << " new file name: ";
         cin >> s;
         resize(img(Rect(Point(3, 3), Point(498, 498))), dst, Size(500, 500), 0, 0);
         imwrite(s, dst);
         cout << s << "save" << endl;
      }
      else if (load.contains(Point(x, y))) {//불러오기 (완성)
         cout << "load" << endl;
         String s;
         cout << "saved file name: ";
         cin >> s;
         dst = imread(s);
         resize(dst, dst, Size(495, 495));
         dst.copyTo(img(Rect(Point(3, 3), Point(498, 498))));
      }
      else if (run.contains(Point(x, y))) {//동작
         cout << "run" << endl;
         cout << "number: " << run_real(img(Rect(Point(3, 3), Point(498, 498)))) << endl;
      }
      else if (Exit.contains(Point(x, y))) {//종료 (완성)
         cout << "exit" << endl;
         exit(1);
      }
      else if (f1.contains(Point(x, y))) {
         cout << "f1 (바운딩 박스)" << endl;
         imshow("bound box",bound_Box(img(Rect(Point(3, 3), Point(498, 498)))));
      }
      else if (f2.contains(Point(x, y))) {
         cout << "f2 (외각선)" << endl;;
         cout << ContourCount(img(Rect(Point(3, 3), Point(498, 498)))) << "개" << endl;
      }
      else if (f3.contains(Point(x, y))) {
         cout << "f3(무게 중심)" << endl;
         cout << CP(img(Rect(Point(3, 3), Point(498, 498)))) << endl;
      }
      else if (f4.contains(Point(x, y))) {
         cout << "f4 (x,y축 분석)" << endl;
         vector<double> avgx = divide_x(img(Rect(Point(3, 3), Point(498, 498))));
         vector<double> avgy = divide_y(img(Rect(Point(3, 3), Point(498, 498))));
         cout << "x 평균: " << avg(avgx) << endl;
         cout << "y 평균: " << avg(avgy) << endl;
      }
      else if (f5.contains(Point(x, y))) {
         cout << "f5 (가로세로 비율) " << endl;
         cout << aspect_ratio(img(Rect(Point(3, 3), Point(498, 498)))) << endl;
      }
      break;
   case EVENT_MOUSEMOVE:
      if (flags & EVENT_FLAG_LBUTTON && number.contains(Point(x, y))) {//그리기 (완성)
         line(img, ptOld, Point(x, y), Scalar(0, 0, 0), 5);
         imshow("img", img);
         ptOld = Point(x, y);
      }
      break;
   default:
      break;
   }
   imshow("img", img);
}

Mat bound_Box(Mat img) { // 바운딩 박스 (숫자가 입력된 범위)
   cvtColor(img, gray, COLOR_BGR2GRAY);
   threshold(gray, bin, 0, 255, THRESH_BINARY_INV | THRESH_OTSU);
   dilate(bin, bin, getStructuringElement(MORPH_CROSS, Size(8, 8), Point(-1, -1)));

   Mat labels, stats, centroids;
   int cnt = connectedComponentsWithStats(bin, labels, stats, centroids);

   int* p = stats.ptr<int>(1);
   bin = bin(Rect(p[0], p[1], p[2], p[3]));
   return bin;
} 

int ContourCount(Mat img) { //외각선 개수
   Mat dst = bound_Box(img);
   morphologyEx(dst, dst, MORPH_CLOSE, Mat(), Point(-1, -1), 2);
   vector<vector<Point>> contours;
   findContours(bin, contours, RETR_LIST, CHAIN_APPROX_NONE);
   return contours.size();
}

Point CP(Mat img) {//무게중심 좌표
   vector<int> center_res;
   bin = bound_Box(img);

   Mat labels, stats, centroids;
   int cnt = connectedComponentsWithStats(bin, labels, stats, centroids);

   int per_x = centroids.at<double>(1, 0) / stats.at<int>(1, 2) * bin.cols;
   int per_y = centroids.at<double>(1, 1) / stats.at<int>(1, 3) * bin.rows;
   cvtColor(bin, bin, COLOR_GRAY2BGR);
   circle(bin, Point(per_x, per_y), 2, Scalar(255, 0, 0), 2, -1);
   imshow("boundingbox", bin);
   return Point(per_x, per_y);
}

vector<double> divide_x(Mat img) { //분석x
   img = bound_Box(img);
   Mat dst(img.size(), img.depth(), Scalar(0));
   vector<double> sum;
   vector<double> avgx;
   sum.resize(10);
   avgx.resize(10);
   for (int k = 0; k < 10; k++)
   {
      for (int i = 0; i <= img.cols; i++) //x축으로 1/10 나눈 부분의 평균 픽셀값 개수 저장 ||||
      {
         for (int j = 0; j < img.rows; j++)
         {
            if (i >= img.cols / 10 * k && i < img.cols / 10 * (k + 1)) {
               if (img.at<uchar>(j, i) == 255) {
                  sum[k] += 1;
               }
            }
         }
      }
   }
   for (int i = 0; i < 10; i++)
   {
      avgx[i] = sum[i] / img.rows * (img.cols / 10);
      cout << i << "번 x축 평균개수:" << avgx[i] << endl;
   }
   return avgx;
}

vector<double> divide_y(Mat img) { //분석y
   img = bound_Box(img);
   Mat dst(img.size(), img.depth(), Scalar(0));
   vector<double> sum;
   vector<double> avgy;
   sum.resize(10);
   avgy.resize(10);
   for (int k = 0; k < 10; k++)
   {
      for (int i = 0; i <= img.rows; i++) //y축으로 1/10 나눈 부분의 평균 픽셀값 개수 저장 =
      {
         for (int j = 0; j < img.cols; j++)
         {
            if (i >= img.rows / 10 * k && i < img.rows / 10 * (k + 1)) {
               if (img.at<uchar>(i, j) == 255) {
                  sum[k] += 1;
               }
            }
         }
      }
   }
   for (int i = 0; i < 10; i++)
   {
      avgy[i] = sum[i] / img.cols * (img.rows / 10);
      cout << i << "번 y축 평균개수:" << avgy[i] << endl;
   }
   return avgy;
}

double avg(vector<double> v) { //벡터값의 평균 구하기
   double avg = 0;
   for (int i = 0; i < v.size(); i++)
   {
      avg += v[i];
   }
   avg = avg / v.size();
   return avg;
}

Mat cut_c(Mat img, Mat cen, int direction, int type) { //무게중심으로 객체 자르기 x방향:1 , y방향:2 , 십자방향: 3
   Mat a = img;
   double x = cen.at<double>(1, 0);
   double y = cen.at<double>(1, 1);
   if (direction == 1) {
      if (type == 1) {
         a = img(Rect(Point(0, 0), Size(img.cols, y)));
      }
      else {
         a = img(Rect(Point(0, y), Size(img.cols, img.rows - y)));
      }
   }
   else if (direction == 2) {
      if (type == 1) {
         a = img(Rect(Point(0, 0), Size(x, img.rows)));
      }
      else {
         a = img(Rect(Point(x, 0), Size(img.cols - x, img.rows)));
      }
   }
   else if (direction == 3) {
      if (type == 1) {
         a = img(Rect(0, 0, x, y));
      }
      else if (type == 2) {
         a = img(Rect(x, 0, img.cols - x, y));
      }
      else if (type == 3) {
         a = img(Rect(0, y, x, img.rows - y));
      }
      else {
         a = img(Rect(x, y, img.cols - x, img.rows - y));
      }
   }
   return a;
}

double aspect_ratio(Mat img) {
   Mat bin = bound_Box(img);
   if (bin.empty()) {
      cerr << "Bounding box not found. Possibly too small." << endl;
      return 0.0;
   }
   vector<vector<Point>> contours;
   findContours(bin, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
   int largest_contour_index = 0;
   double largest_area = 0.0;
   for (size_t i = 0; i < contours.size(); ++i) {
      double area = contourArea(contours[i]);
      if (area > largest_area) {
         largest_area = area;
         largest_contour_index = i;
      }
   }
   Rect bounding_box = boundingRect(contours[largest_contour_index]);
   double aspect_ratio = static_cast<double>(bounding_box.width) / bounding_box.height;
   return aspect_ratio;
}

int run_real(Mat img) {
   int ConSize = ContourCount(img);
   Mat a, b, c;
   cvtColor(img, a, COLOR_BGR2GRAY);
   threshold(a, b, 0, 255, THRESH_BINARY_INV | THRESH_OTSU);
   dilate(b, b, getStructuringElement(MORPH_CROSS, Size(8, 8), Point(-1, -1)));

   Mat labels, stats, centroids;
   int cnt = connectedComponentsWithStats(b, labels, stats, centroids);

   if (ConSize == 3) {
      return 8;
   }
   else if (ConSize == 2) {
      if ((cvRound(divide_y(img)[5] - cvRound(divide_y(img)[6]))) < 1 && aspect_ratio(img) >= 0.8) {
         return 0;
      }
      else if ((cvRound(divide_y(img)[6] - cvRound(divide_y(img)[7]))) < 1 && aspect_ratio(img) <= 0.8) {
         return 9;
      }
      else if ((cvRound(divide_y(img)[6] != cvRound(divide_y(img)[8]))) && aspect_ratio(img) <= 0.65) {
         return 6;
      }
      else {
         return 4;
      }
   }
   else if (ConSize == 1) {
      if (CP(img).x / CP(img).y <= 0.5 && avg(divide_x(img)) <= 30) {
         return 1;
      }
      else if ((CP(img).x - CP(img).y) <= 10 && aspect_ratio(img) <= 1.5 && aspect_ratio(img) >= 0.95) {
         return 2;
      }
      else if ((CP(img).y - CP(img).x) <= 20 && aspect_ratio(img) <= 1.15 && aspect_ratio(img) >= 0.75) {
         return 3;
      }
      else if ((CP(img).y - CP(img).x) >= 15 && aspect_ratio(img) <= 0.9) {
         return 5;
      }
      else {
         return 7;
      }
   }
}